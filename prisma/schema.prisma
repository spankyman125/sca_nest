generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                @id @default(autoincrement())
  username     String             @unique
  passwordHash String
  pseudonym    String
  isOnline     Boolean            @default(false)
  avatarUrl    String             @default("static/images/avatars/user-default.png")
  messages     Message[]
  rooms        UserRoomRelation[]
  friendWith   FriendsRelation[]  @relation("friend")
  friendTo     FriendsRelation[]  @relation("user")
}

model Room {
  id        Int                @id @default(autoincrement())
  name      String             @default("New Room")
  messages  Message[]
  users     UserRoomRelation[]
  avatarUrl String             @default("static/images/avatars/room-default.png")
  private Boolean @default(false)
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  roomId    Int
  userId    Int
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model UserRoomRelation {
  userId  Int
  roomId  Int
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  room    Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  // private Boolean @default(false)
  // joinedAt DateTime @default(now())
  // permissions UserRoomToPermission[]

  @@id([userId, roomId])
}

// model UserRoomToPermission {
//   userRoomId   Int
//   permissionId Int
//   userRoom     UserRoomRelation @relation(fields: [userRoomId, permissionId], references: [userId, roomId])
//   permission   Permission       @relation(fields: [permissionId], references: [id])

//   @@id([userRoomId, permissionId])
// }

// model Permission {
//   id       Int                    @id @default(autoincrement())
//   name     String
//   userRoom UserRoomToPermission[]
// }

model FriendsRelation {
  userId   Int
  friendId Int
  User     User @relation("user", fields: [userId], references: [id])
  Friend   User @relation("friend", fields: [friendId], references: [id])

  @@id([userId, friendId])
}
